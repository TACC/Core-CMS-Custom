# coding: utf-8

"""
    APCD API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubmissionUpdate(BaseModel):
    """
    SubmissionUpdate
    """ # noqa: E501
    apcd_id: Optional[StrictInt] = None
    submitter_id: Optional[StrictInt] = None
    zip_file_name: Optional[StrictStr] = None
    received_timestamp: Optional[datetime] = None
    data_period_start: Optional[StrictInt] = None
    data_period_end: Optional[StrictInt] = None
    test_submission_flag: Optional[Annotated[str, Field(strict=True, max_length=1)]] = None
    status: Optional[StrictStr] = None
    outcome: Optional[StrictStr] = None
    outcome_reason: Optional[StrictStr] = None
    compressed_size: Optional[StrictInt] = None
    processed_timestamp: Optional[datetime] = None
    notes: Optional[StrictStr] = None
    payor_code: Optional[StrictInt] = None
    received_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["apcd_id", "submitter_id", "zip_file_name", "received_timestamp", "data_period_start", "data_period_end", "test_submission_flag", "status", "outcome", "outcome_reason", "compressed_size", "processed_timestamp", "notes", "payor_code", "received_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubmissionUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubmissionUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apcd_id": obj.get("apcd_id"),
            "submitter_id": obj.get("submitter_id"),
            "zip_file_name": obj.get("zip_file_name"),
            "received_timestamp": obj.get("received_timestamp"),
            "data_period_start": obj.get("data_period_start"),
            "data_period_end": obj.get("data_period_end"),
            "test_submission_flag": obj.get("test_submission_flag"),
            "status": obj.get("status"),
            "outcome": obj.get("outcome"),
            "outcome_reason": obj.get("outcome_reason"),
            "compressed_size": obj.get("compressed_size"),
            "processed_timestamp": obj.get("processed_timestamp"),
            "notes": obj.get("notes"),
            "payor_code": obj.get("payor_code"),
            "received_id": obj.get("received_id")
        })
        return _obj


