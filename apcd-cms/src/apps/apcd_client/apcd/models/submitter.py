# coding: utf-8

"""
    APCD API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Submitter(BaseModel):
    """
    Submitter
    """ # noqa: E501
    org_name: Optional[StrictStr] = None
    submitter_code: Optional[StrictStr] = None
    payor_code: Optional[StrictInt] = None
    file_me: Optional[StrictBool] = None
    file_pv: Optional[StrictBool] = None
    file_mc: Optional[StrictBool] = None
    file_pc: Optional[StrictBool] = None
    file_dc: Optional[StrictBool] = None
    submission_method: Optional[StrictStr] = None
    fein: Optional[Annotated[str, Field(strict=True, max_length=10)]] = None
    license_number: Optional[StrictInt] = None
    naic_company_code: Optional[StrictInt] = None
    fingerprint: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    development: Optional[StrictBool] = None
    submitter_id: StrictInt
    apcd_id: StrictInt
    registration_id: StrictInt
    encryption_key: Optional[StrictStr] = None
    submitting_for_self: Optional[StrictBool] = None
    status: Optional[StrictStr] = None
    test_submissions_only: Optional[StrictBool] = None
    compliant: Optional[StrictBool] = None
    last_updated_timestamp: Optional[datetime] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    notes: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["org_name", "submitter_code", "payor_code", "file_me", "file_pv", "file_mc", "file_pc", "file_dc", "submission_method", "fein", "license_number", "naic_company_code", "fingerprint", "development", "submitter_id", "apcd_id", "registration_id", "encryption_key", "submitting_for_self", "status", "test_submissions_only", "compliant", "last_updated_timestamp", "created_at", "updated_at", "notes"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Submitter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Submitter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "org_name": obj.get("org_name"),
            "submitter_code": obj.get("submitter_code"),
            "payor_code": obj.get("payor_code"),
            "file_me": obj.get("file_me"),
            "file_pv": obj.get("file_pv"),
            "file_mc": obj.get("file_mc"),
            "file_pc": obj.get("file_pc"),
            "file_dc": obj.get("file_dc"),
            "submission_method": obj.get("submission_method"),
            "fein": obj.get("fein"),
            "license_number": obj.get("license_number"),
            "naic_company_code": obj.get("naic_company_code"),
            "fingerprint": obj.get("fingerprint"),
            "development": obj.get("development"),
            "submitter_id": obj.get("submitter_id"),
            "apcd_id": obj.get("apcd_id"),
            "registration_id": obj.get("registration_id"),
            "encryption_key": obj.get("encryption_key"),
            "submitting_for_self": obj.get("submitting_for_self"),
            "status": obj.get("status"),
            "test_submissions_only": obj.get("test_submissions_only"),
            "compliant": obj.get("compliant"),
            "last_updated_timestamp": obj.get("last_updated_timestamp"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "notes": obj.get("notes")
        })
        return _obj


