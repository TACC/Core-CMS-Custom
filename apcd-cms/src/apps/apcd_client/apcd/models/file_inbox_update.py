# coding: utf-8

"""
    APCD API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FileInboxUpdate(BaseModel):
    """
    FileInboxUpdate
    """ # noqa: E501
    file_name: Annotated[str, Field(strict=True, max_length=255)]
    file_size_mb: Optional[Union[StrictFloat, StrictInt]] = None
    file_count: Optional[StrictInt] = None
    file_type: Optional[Annotated[str, Field(strict=True, max_length=10)]] = None
    file_owner: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    transaction_type: Optional[Annotated[str, Field(strict=True, max_length=1)]] = None
    submitter_code: Annotated[str, Field(min_length=3, strict=True, max_length=8)]
    payor_code: StrictInt
    data_period_start: Optional[StrictInt] = None
    data_period_end: Optional[StrictInt] = None
    routed_to: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    comment: Optional[Annotated[str, Field(strict=True, max_length=8000)]] = None
    file_pv: StrictBool
    file_mc: StrictBool
    file_pc: StrictBool
    file_dc: StrictBool
    file_me: StrictBool
    received_date: datetime
    calendar_item_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["file_name", "file_size_mb", "file_count", "file_type", "file_owner", "transaction_type", "submitter_code", "payor_code", "data_period_start", "data_period_end", "routed_to", "comment", "file_pv", "file_mc", "file_pc", "file_dc", "file_me", "received_date", "calendar_item_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FileInboxUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FileInboxUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file_name": obj.get("file_name"),
            "file_size_mb": obj.get("file_size_mb"),
            "file_count": obj.get("file_count"),
            "file_type": obj.get("file_type"),
            "file_owner": obj.get("file_owner"),
            "transaction_type": obj.get("transaction_type"),
            "submitter_code": obj.get("submitter_code"),
            "payor_code": obj.get("payor_code"),
            "data_period_start": obj.get("data_period_start"),
            "data_period_end": obj.get("data_period_end"),
            "routed_to": obj.get("routed_to"),
            "comment": obj.get("comment"),
            "file_pv": obj.get("file_pv"),
            "file_mc": obj.get("file_mc"),
            "file_pc": obj.get("file_pc"),
            "file_dc": obj.get("file_dc"),
            "file_me": obj.get("file_me"),
            "received_date": obj.get("received_date"),
            "calendar_item_id": obj.get("calendar_item_id")
        })
        return _obj


