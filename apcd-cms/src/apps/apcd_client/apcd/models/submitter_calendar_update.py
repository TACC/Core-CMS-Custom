# coding: utf-8

"""
    APCD API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubmitterCalendarUpdate(BaseModel):
    """
    SubmitterCalendarUpdate
    """ # noqa: E501
    data_period_start: Optional[Annotated[str, Field(min_length=6, strict=True, max_length=6)]] = None
    data_period_end: Optional[Annotated[str, Field(min_length=6, strict=True, max_length=6)]] = None
    expected_submission_date: Optional[date] = None
    submission_id: Optional[StrictInt] = None
    file_me: Optional[StrictBool] = None
    file_pv: Optional[StrictBool] = None
    file_mc: Optional[StrictBool] = None
    file_pc: Optional[StrictBool] = None
    file_dc: Optional[StrictBool] = None
    granted_reprieve: Optional[StrictBool] = None
    cancelled: Optional[StrictBool] = None
    submitter_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["data_period_start", "data_period_end", "expected_submission_date", "submission_id", "file_me", "file_pv", "file_mc", "file_pc", "file_dc", "granted_reprieve", "cancelled", "submitter_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubmitterCalendarUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubmitterCalendarUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data_period_start": obj.get("data_period_start"),
            "data_period_end": obj.get("data_period_end"),
            "expected_submission_date": obj.get("expected_submission_date"),
            "submission_id": obj.get("submission_id"),
            "file_me": obj.get("file_me"),
            "file_pv": obj.get("file_pv"),
            "file_mc": obj.get("file_mc"),
            "file_pc": obj.get("file_pc"),
            "file_dc": obj.get("file_dc"),
            "granted_reprieve": obj.get("granted_reprieve"),
            "cancelled": obj.get("cancelled"),
            "submitter_id": obj.get("submitter_id")
        })
        return _obj


