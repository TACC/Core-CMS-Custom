# coding: utf-8

"""
    APCD API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from apcd.models.registration_contact import RegistrationContact
from apcd.models.registration_entity import RegistrationEntity
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RegistrationWithChildren(BaseModel):
    """
    RegistrationWithChildren
    """ # noqa: E501
    applicable_period_start: Optional[StrictInt] = None
    applicable_period_end: Optional[StrictInt] = None
    org_type: Optional[StrictStr] = None
    business_name: Optional[StrictStr] = None
    mail_address: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    zip: Optional[StrictStr] = None
    file_me: Optional[StrictBool] = None
    file_pv: Optional[StrictBool] = None
    file_mc: Optional[StrictBool] = None
    file_pc: Optional[StrictBool] = None
    file_dc: Optional[StrictBool] = None
    submission_method: Optional[StrictStr] = None
    submitting_for_self: Optional[StrictBool] = None
    registration_id: StrictInt
    posted_date: Optional[date] = None
    registration_status: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    contacts: Optional[List[RegistrationContact]] = None
    entities: Optional[List[RegistrationEntity]] = None
    __properties: ClassVar[List[str]] = ["applicable_period_start", "applicable_period_end", "org_type", "business_name", "mail_address", "city", "state", "zip", "file_me", "file_pv", "file_mc", "file_pc", "file_dc", "submission_method", "submitting_for_self", "registration_id", "posted_date", "registration_status", "created_at", "updated_at", "contacts", "entities"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RegistrationWithChildren from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item in self.contacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entities (list)
        _items = []
        if self.entities:
            for _item in self.entities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['entities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RegistrationWithChildren from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicable_period_start": obj.get("applicable_period_start"),
            "applicable_period_end": obj.get("applicable_period_end"),
            "org_type": obj.get("org_type"),
            "business_name": obj.get("business_name"),
            "mail_address": obj.get("mail_address"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zip": obj.get("zip"),
            "file_me": obj.get("file_me"),
            "file_pv": obj.get("file_pv"),
            "file_mc": obj.get("file_mc"),
            "file_pc": obj.get("file_pc"),
            "file_dc": obj.get("file_dc"),
            "submission_method": obj.get("submission_method"),
            "submitting_for_self": obj.get("submitting_for_self"),
            "registration_id": obj.get("registration_id"),
            "posted_date": obj.get("posted_date"),
            "registration_status": obj.get("registration_status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "contacts": [RegistrationContact.from_dict(_item) for _item in obj.get("contacts")] if obj.get("contacts") is not None else None,
            "entities": [RegistrationEntity.from_dict(_item) for _item in obj.get("entities")] if obj.get("entities") is not None else None
        })
        return _obj


