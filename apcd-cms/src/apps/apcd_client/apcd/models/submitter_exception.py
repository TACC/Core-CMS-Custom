# coding: utf-8

"""
    APCD API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubmitterException(BaseModel):
    """
    SubmitterException
    """ # noqa: E501
    exception_id: StrictInt
    submitter_id: StrictInt
    requestor_name: Annotated[str, Field(strict=True, max_length=100)]
    request_type: Annotated[str, Field(strict=True, max_length=20)]
    explanation_justification: Optional[StrictStr] = None
    submitter_code: Optional[Annotated[str, Field(strict=True, max_length=8)]] = None
    payor_code: Optional[StrictInt] = None
    user_id: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    requestor_email: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    data_file: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = None
    field_number: Optional[Annotated[str, Field(strict=True, max_length=10)]] = None
    required_threshold: Optional[StrictInt] = None
    requested_threshold: Optional[StrictInt] = None
    requested_expiration_date: Optional[date] = None
    approved_threshold: Optional[StrictInt] = None
    approved_expiration_date: Optional[date] = None
    status: Optional[Annotated[str, Field(strict=True, max_length=10)]] = None
    outcome: Optional[Annotated[str, Field(strict=True, max_length=15)]] = None
    created_at: datetime
    updated_at: Optional[datetime] = None
    notes: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["exception_id", "submitter_id", "requestor_name", "request_type", "explanation_justification", "submitter_code", "payor_code", "user_id", "requestor_email", "data_file", "field_number", "required_threshold", "requested_threshold", "requested_expiration_date", "approved_threshold", "approved_expiration_date", "status", "outcome", "created_at", "updated_at", "notes"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubmitterException from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubmitterException from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exception_id": obj.get("exception_id"),
            "submitter_id": obj.get("submitter_id"),
            "requestor_name": obj.get("requestor_name"),
            "request_type": obj.get("request_type"),
            "explanation_justification": obj.get("explanation_justification"),
            "submitter_code": obj.get("submitter_code"),
            "payor_code": obj.get("payor_code"),
            "user_id": obj.get("user_id"),
            "requestor_email": obj.get("requestor_email"),
            "data_file": obj.get("data_file"),
            "field_number": obj.get("field_number"),
            "required_threshold": obj.get("required_threshold"),
            "requested_threshold": obj.get("requested_threshold"),
            "requested_expiration_date": obj.get("requested_expiration_date"),
            "approved_threshold": obj.get("approved_threshold"),
            "approved_expiration_date": obj.get("approved_expiration_date"),
            "status": obj.get("status"),
            "outcome": obj.get("outcome"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "notes": obj.get("notes")
        })
        return _obj


